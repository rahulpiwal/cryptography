/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Module1;

/**
 *
 * @author VISH
 */
public class Encryption extends javax.swing.JFrame {

    /**
     * Creates new form Encryption
     */
    
    char encoder[][]=    {  {'A','B','C','D','E','F','G','H','I','J'},
                            {'K','L','M','N','O','P','Q','R','S','T'},
                            {'U','V','W','X','Y','Z','a','b','c','d'},
                            {'e','f','g','h','i','j','k','l','m','n'},
                            {'o','p','q','r','s','t','u','v','w','x'},
                            {'y','z','0','1','2','3','4','5','6','7'},
                            {'8','9',' ','@','#','!','$','%','+','-'},
                            {'*','/','=','_','(',')','[',']','&','^'}
                        };
    
    
    
    char encoder1[][]= 	{   {'1','2','3','4','5','6','7','8','9','0'},
			    {'a','b','c','d','e','f','g','h','i','j'},
                            {'k','l','m','n','o','p','q','r','s','t'},
                            {'u','v','w','x','y','z','A','B','C','D'},
                            {'E','F','G','H','I','J','K','L','M','N'},
                            {'O','P','Q','R','S','T','U','V','W','X'},
                            {'Y','Z','!','*','+','=','@','#','$','%'},
                            {'?','>','<','/','|',']','[','}','{','&'}
                        };
        
    
    
    
    public Encryption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lable = new javax.swing.JLabel();
        encrypt = new javax.swing.JButton();
        ptext = new javax.swing.JTextField();
        citext = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lable.setText("ENTER THE PLAIN TEXT");

        encrypt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        encrypt.setText("ENCRYPT");
        encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptActionPerformed(evt);
            }
        });

        ptext.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        ptext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ptextActionPerformed(evt);
            }
        });
        ptext.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ptextKeyPressed(evt);
            }
        });

        citext.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addComponent(lable)
                .addContainerGap(172, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(citext)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ptext)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(204, 204, 204))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lable, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ptext, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(citext, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptActionPerformed
        // TODO add your handling code here:
        try{            
            String pltext="";
            
            pltext=ptext.getText();
            char[] pl_text=pltext.toCharArray();  
            int l;
            l=pl_text.length;
            int[] row_loc=new int[l];
            int[] col_loc=new int[l];
            
          row_loc= find_row_pos( pl_text,l);
          col_loc= find_col_pos(pl_text,l);
          
       //     for(int i=0;i<l;i++){
         //    System.out.println("row="+row_loc[i]+"col="+col_loc[i]);
           // }          
            converting_ciphertext(pl_text,row_loc,col_loc,l);
            
            String b=new String(pl_text);
            citext.setText(b);
        }catch(Exception e){
            System.out.println(e);            
        }
    }//GEN-LAST:event_encryptActionPerformed

    private void ptextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ptextKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ptextKeyPressed

    private void ptextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ptextActionPerformed
        // TODO add your handling code here:
        
         try{            
            String pltext="";
            
            pltext=ptext.getText();
            char[] pl_text=pltext.toCharArray();  
            int l;
            l=pl_text.length;
            int[] row_loc=new int[l];
            int[] col_loc=new int[l];
            
          row_loc= find_row_pos( pl_text,l);
          col_loc= find_col_pos(pl_text,l);
          
       //     for(int i=0;i<l;i++){
         //    System.out.println("row="+row_loc[i]+"col="+col_loc[i]);
           // }          
            converting_ciphertext(pl_text,row_loc,col_loc,l);
            
            String b=new String(pl_text);
            citext.setText(b);
        }catch(Exception e){
            System.out.println(e);            
        }
    }//GEN-LAST:event_ptextActionPerformed
    
    /**
     *
     */
    public  int[] find_row_pos(char[] pl_text, int len){                
                
        int i,j,k;        
        int[] row_lo=new int[len];
        for(i=0;i<len;i++){
            for(j=0;j<8;j++){
                for(k=0;k<10;k++){
                    if(pl_text[i] == encoder[j][k]){
                        row_lo[i]=j;
                        
                    }                        
                }
            }
        }
        
        return row_lo;
    }
    /** 
    **
    **/
    
    public int[] find_col_pos(char[] pl_text, int len){
        int i,j,k;
        int[] col_lo=new int[len];
        for(i=0;i<len;i++){
            for(j=0;j<8;j++){
                for(k=0;k<10;k++){
                    if(pl_text[i] ==  encoder[j][k]){
                        col_lo[i]=k;
                    }
                }
            }
        }
        return col_lo;
    }
    /** 
    **
    **/
    
    
    public void converting_ciphertext(char[] pl_text, int[] row_loc, int[] col_loc, int ptextlen){
        
        if(ptextlen%2 == 0){	// that means plaintext length is even;
		for(int i=0;i<ptextlen;i=i+2){
		
			if((row_loc[i] == row_loc[i+1]) && (col_loc[i] == col_loc[i+1])){    // that means two character at the same position;
				
				int row1,row2,col1,col2;
				col1=col_loc[i];
				col2=col_loc[i+1];
				row1=row_loc[i];
				row2=row_loc[i+1];
				same_char(pl_text,i,row1,col1,row2,col2);		// calling "same_char" function ;
			
			}else if(row_loc[i] == row_loc[i+1]){	// that means two character are in same row ;
			
				int row1,row2,col1,col2;
				col1=col_loc[i];
				col2=col_loc[i+1];
				row1=row_loc[i];
				row2=row_loc[i+1];
			
				same_row(pl_text,i,row1,col1,row2,col2);		// calling "same_row" function;
			
			}else if( col_loc[i] == col_loc[i+1]){  	// that means they are in same column ;
			
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				same_col(pl_text,i,row1,col1,row2,col2);		// calling "same_col" function;
				
			}else{
			// that means they are in different row and dirrerent column;
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				different_row_col(pl_text,i,row1,col1,row2,col2);
			}
		}
	
	}else{
		for(int i=0;i<ptextlen-1;i=i+2){
		
			if((row_loc[i] == row_loc[i+1]) && (col_loc[i] == col_loc[i+1])){    // that means two character at the same position;
				int row1,row2,col1,col2;
				col1=col_loc[i];
				col2=col_loc[i+1];
				row1=row_loc[i];
				row2=row_loc[i+1];
				same_char(pl_text,i,row1,col1,row2,col2);			// calling "same_char" function ;
			
			}else if(row_loc[i] == row_loc[i+1]){	// that means two character are in same row ;
				int row1,row2,col1,col2;
				col1=col_loc[i];
				col2=col_loc[i+1];
				row1=row_loc[i];
				row2=row_loc[i+1];
				
				same_row(pl_text,i,row1,col1,row2,col2);		// calling "same_row" function;
			
			}else if( col_loc[i] == col_loc[i+1]){  	// that means they are in same column ;
			
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				same_col(pl_text,i,row1,col1,row2,col2);		// calling "same_col" function;
				
			}else{
				// that means they are in different row and dirrerent column;
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				different_row_col(pl_text,i,row1,col1,row2,col2);
			}
                }				
	}
    }

    /** 
    *
    *
    **/
public int same_char(char p_text[],  int i, int row1, int col1, int row2, int col2){
	
	p_text[i]=encoder1[row1][col1];
	p_text[i+1]=encoder1[row1][col1];
        return 0;
 }
/** 
 *
 *
 **/
int same_row(char cipher[], int pos, int row1, int col1, int row2, int col2){
	
	if(col1 == 9){
		cipher[pos]=encoder[row1][0];			//  Cheacking first character and converting into cipher text;
	}else{
		cipher[pos]=encoder[row1][col1+1];
	}
	
	if(col2 == 9){
		cipher[pos+1]=encoder[row2][0];			// Cheacking second character and converting into cipher text;
	}else{	
		cipher[pos+1]=encoder[row2][col2+1];
	}
	
        return 0;
}
/** 
*
*
**/
int same_col(char cipher[], int pos, int row1, int col1, int row2, int col2){
	
	if(row1 == 7){
		cipher[pos]= encoder[0][col1];			//  Cheacking first character and converting into cipher text;
	}else{
		cipher[pos]= encoder[row1+1][col1];
	}
	
	if(row2 == 7){
		cipher[pos+1]= encoder[0][col1];		// Cheacking second character and converting into cipher text;
	}else{
		cipher[pos+1]= encoder[row2+1][col2];
	}
        return 0;
}
/** 
*
*
**/
int different_row_col(char cipher[], int pos, int row1, int col1, int row2, int col2){
	
	cipher[pos]= encoder[row1][col2];
	cipher[pos+1]= encoder[row2][col1];
        return 0;
}

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
     
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Encryption().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField citext;
    private javax.swing.JButton encrypt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lable;
    private javax.swing.JTextField ptext;
    // End of variables declaration//GEN-END:variables
}
