/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Module1;

/**
 *
 * @author VISH
 */
public class Decyption extends javax.swing.JFrame {

    /**
     * Creates new forDecyption
     */
    int row,col;
    char encoder[][]=    {  {'A','B','C','D','E','F','G','H','I','J'},
                            {'K','L','M','N','O','P','Q','R','S','T'},
                            {'U','V','W','X','Y','Z','a','b','c','d'},
                            {'e','f','g','h','i','j','k','l','m','n'},
                            {'o','p','q','r','s','t','u','v','w','x'},
                            {'y','z','0','1','2','3','4','5','6','7'},
                            {'8','9',' ','@','#','!','$','%','+','-'},
                            {'*','/','=','_','(',')','[',']','&','^'}
                        };
    
    char encoder1[][]= 	{   {'1','2','3','4','5','6','7','8','9','0'},
			    {'a','b','c','d','e','f','g','h','i','j'},
                            {'k','l','m','n','o','p','q','r','s','t'},
                            {'u','v','w','x','y','z','A','B','C','D'},
                            {'E','F','G','H','I','J','K','L','M','N'},
                            {'O','P','Q','R','S','T','U','V','W','X'},
                            {'Y','Z','!','*','+','=','@','#','$','%'},
                            {'?','>','<','/','|',']','[','}','{','&'}
                        };
    
    
    public Decyption() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lable = new javax.swing.JLabel();
        decrypt = new javax.swing.JButton();
        citext = new javax.swing.JTextField();
        ptext = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lable.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lable.setText("ENTER THE CIPHER TEXT");

        decrypt.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        decrypt.setText("DECRYPT");
        decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptActionPerformed(evt);
            }
        });

        citext.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        ptext.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(199, 199, 199))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(citext)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(lable, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ptext)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lable, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(citext, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ptext, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptActionPerformed
        // TODO add your handling code here:
       
            try{
                
                String ctext="";
                int l;
                ctext=citext.getText();
                char[] ci_text=ctext.toCharArray();
                l=ci_text.length;
                
                int[] row_loc=new int[l];
                int[] col_loc=new int[l];
                
                row_loc=find_row_position(ci_text,l);
                col_loc=find_col_position(ci_text,l);
                
                converting_plaintext(ci_text,row_loc,col_loc,l);
                
                String b=new String(ci_text);
                ptext.setText(b);
                        
            }catch(Exception e){
                System.out.println(e);
            }
       
    }//GEN-LAST:event_decryptActionPerformed
    /** 
    **
    **/
    
    
     public  int[] find_row_position(char[] ci_text, int len){
     
         int i,j,k;
         int[] row_lo=new int[len];
         for(i=0;i<len;i++){
            for(j=0;j<8;j++){
                for(k=0;k<10;k++){
                    if(ci_text[i] == encoder[j][k]){
                        row_lo[i]=j;
                        
                    }                        
                }
            }
        }
        
        return row_lo;
     }
     
    /** 
    **
    **/
    
    public int[] find_col_position(char[] ci_text, int len){
        int i,j,k;
        int[] col_lo=new int[len];
        for(i=0;i<len;i++){
            for(j=0;j<8;j++){
                for(k=0;k<10;k++){
                    if(ci_text[i] ==  encoder[j][k]){
                        col_lo[i]=k;
                    }
                }
            }
        }
        return col_lo;
    }
    /** 
    **
    **/
    public void converting_plaintext(char[] ci_text, int[] row_loc, int[] col_loc, int citextlen){
        
        	//we have to cheack string length is odd or even;
	
	if(citextlen%2 == 0){	// that means plaintext length is even;
		for(int i=0;i<citextlen;i=i+2){
			
			if(ci_text[i] == ci_text[i+1]){
				
				int row1,col1;
				
				row1=same_position2(ci_text[i]);
				col1=same_position1(ci_text[i]);
				same_char(ci_text,i,row1,col1);
						
			}else if(row_loc[i] == row_loc[i+1]){	// that means two character are in same row ;
			
					int row1,row2,col1,col2;
					col1=col_loc[i];
					col2=col_loc[i+1];
					row1=row_loc[i];
					row2=row_loc[i+1];
			
					same_row(ci_text,i,row1,col1,row2,col2);		// calling "same_row" function;
			
				}else if( col_loc[i] == col_loc[i+1]){  	// that means they are in same column ;
			
					int row1,row2,col1,col2;
					row1=row_loc[i];
					col1=col_loc[i];
					row2=row_loc[i+1];
					col2=col_loc[i+1];
			
					same_col(ci_text,i,row1,col1,row2,col2);		// calling "same_col" function;
				
			}else{
			// that means they are in different row and dirrerent column;
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				different_row_col(ci_text,i,row1,col1,row2,col2);
			}
		}
	
	}else{
		for(int i=0;i<citextlen-1;i=i+2){
		
			if(ci_text[i] == ci_text[i+1]){
				
				int row1,col1;
				
				row1=same_position2(ci_text[i]);
				col1=same_position1(ci_text[i]);
				same_char(ci_text,i,row1,col1);
			
			}else if(row_loc[i] == row_loc[i+1]){	// that means two character are in same row ;
				int row1,row2,col1,col2;
				col1=col_loc[i];
				col2=col_loc[i+1];
				row1=row_loc[i];
				row2=row_loc[i+1];
				
				same_row(ci_text,i,row1,col1,row2,col2);		// calling "same_row" function;
			
			}else if( col_loc[i] == col_loc[i+1]){  	// that means they are in same column ;
			
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				same_col(ci_text,i,row1,col1,row2,col2);		// calling "same_col" function;
				
			}else{
				// that means they are in different row and dirrerent column;
				int row1,row2,col1,col2;
				row1=row_loc[i];
				col1=col_loc[i];
				row2=row_loc[i+1];
				col2=col_loc[i+1];
			
				different_row_col(ci_text,i,row1,col1,row2,col2);
			}
		}
				
	}
        
    }
    /** 
    **
    **/
    
    	// here finding the position of same characters
public int same_position1( int val){
	
	for(int i=0;i<8;i++){
		for(int j=0;j<10;j++){
			
			if(val == encoder1[i][j]){
				col=j;
				break;
			}
		}
	}
	
	return col;
}
/** 
**
**/

	// here finding the position of same characters
int same_position2( int val){
    
	for(int i=0;i<8;i++){
		for(int j=0;j<10;j++){
			
			if(val == encoder1[i][j]){
				row=i;
				break;
			}
		}
	}
	
	return row;
}

/** 
**
**/

	// They are the same characters
int same_char(char p_text[],  int i, int row1, int col1){
	
	p_text[i]=encoder[row1][col1];
	p_text[i+1]=encoder[row1][col1];
        return 0;
}

/** 
**
**/

// The characters are in same row
int same_row(char cipher[], int pos, int row1, int col1, int row2, int col2){
	
	if(col1 == 0){
		cipher[pos]=encoder[row1][9];			//  Cheacking first character and converting into plain text;
	}else{
		cipher[pos]=encoder[row1][col1-1];
	}
	
	if(col2 == 0){
		cipher[pos+1]=encoder[row2][9];			// Cheacking second character and converting into plain text;
	}else{	
		cipher[pos+1]=encoder[row2][col2-1];
	}

        return 0;
}
/** 
**
**/

	//  The characters are in same columns;
int same_col(char cipher[], int pos, int row1, int col1, int row2, int col2){
	
	if(row1 == 0){
		cipher[pos]= encoder[7][col1];			//  Cheacking first character and converting into plain text;
	}else{
		cipher[pos]= encoder[row1-1][col1];
	}
	
	if(row2 == 7){
		cipher[pos+1]= encoder[7][col1];		// Cheacking second character and converting into plain text;
	}else{
		cipher[pos+1]= encoder[row2-1][col2];
	}
        return 0;
}
/** 
**
**/

	// The characters are in different row and different column;
int different_row_col(char cipher[], int pos, int row1, int col1, int row2, int col2){
	
	cipher[pos]= encoder[row1][col2];
	cipher[pos+1]= encoder[row2][col1];			// Converting into plain text;
        return 0;
}

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Decyption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Decyption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Decyption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Decyption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Decyption().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField citext;
    private javax.swing.JButton decrypt;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lable;
    private javax.swing.JTextField ptext;
    // End of variables declaration//GEN-END:variables
}
